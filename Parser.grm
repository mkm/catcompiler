
%token <int*(int*int)> NUM
%token <string*(int*int)> ID
%token <(int*int)> PLUS MINUS
%token <(int*int)> NOT AND OR
%token <(int*int)> EQUAL LESS
%token <(int*int)> IF THEN ELSE
%token <(int*int)> AT NULL
%token <(int*int)> LET IN CASE OF
%token <(int*int)> FUN LPAR RPAR ARROW
%token <(int*int)> END MATCHARROW
%token <(int*int)> INT BOOL BAR COLON
%token <(int*int)> READ WRITE EOF
%token <(int*int)> COMMA SEMICOLON
%token <(int*int)> TRUE FALSE

%right BAR
%right MATCHARROW
%left ELSE
%left IN LET
%right OR
%right AND
%right NOT
%nonassoc EQUAL LESS
%left PLUS MINUS
%right WRITE

%start Prog
%type <Cat.Prog> Prog
%type <Cat.Type> Type
%type <Cat.Type list> Types
%type <Cat.TyDec list> TyDecs
%type <Cat.Exp> Exp
%type <Cat.Exp list> Exps
%type <Cat.Match> Match
%type <Cat.Pat> Pat
%type <Cat.Pat list> Pats
%type <Cat.FunDec list> FunDecs
%type <Cat.Dec> Dec

%%

Prog :	  TyDecs FunDecs Exp EOF
	                { ($1,$2,$3) }
;

FunDecs : FUN ID COLON Type ARROW Type Match END FunDecs
			{ (#1 $2, $4, $6, $7, $1) :: $9 }
	|		{ [] }
;

Type :	  INT		{ Cat.Int $1 }
     |	  BOOL		{ Cat.Bool $1 }
     |    ID		{ Cat.TyVar(#1 $1, #2 $1) }
;

Types : Type { [$1] }
      | Types COMMA Types { $1 @ $3 }
;

Pat : NUM		{ Cat.NumP $1 }
	| ID 		{ Cat.VarP $1 }
	| TRUE		{ Cat.TrueP $1 }
	| FALSE		{ Cat.FalseP $1 }
	| AT		{ Cat.NullP $1 }
	| LPAR Pats RPAR { Cat.TupleP($2, $1)}
;

Pats :    Pat		{ [$1] }
     	| Pats COMMA Pats { $1 @ $3 }
;

Match :	  Pat MATCHARROW Exp
			{ [($1,$3)] }
	| Match BAR Match
			{ $1 @ $3 }
;

Exp :	  NUM		{ Cat.Num $1 }
	| ID		{ Cat.Var $1 }
	| Exp PLUS Exp	{ Cat.Plus ($1, $3, $2) }
	| Exp MINUS Exp	{ Cat.Minus ($1, $3, $2) }
	| Exp EQUAL Exp	{ Cat.Equal ($1, $3, $2) }
	| Exp LESS Exp	{ Cat.Less ($1, $3, $2) }
  | NOT Exp { Cat.Not ($2, $1) }
  | Exp AND Exp { Cat.And ($1, $3, $2) }
  | Exp OR Exp { Cat.Or ($1, $3, $2) }
	| ID Exp %prec WRITE
			{ Cat.Apply (#1 $1, $2, #2 $1) }
	| READ		{ Cat.Read $1 }
	| WRITE Exp	{ Cat.Write ($2, $1) }
	| LPAR Exp RPAR	{ $2 }
	| IF Exp THEN Exp ELSE Exp { Cat.If ($2, $4, $6, $1) }
	| LET Dec IN Exp { Cat.Let ($2, $4, $1) }
	| LPAR Exps RPAR COLON ID { Cat.MkTuple($2, #1 $5, $1) }
    | CASE Exp OF Match END { Cat.Case ($2, $4, $1) }
	| NULL COLON ID { Cat.Null(#1 $3, $1) }
;

Exps :	  Exp		{ [$1] }
     	| Exps COMMA Exps { $1 @ $3 }
;

Dec : Pat EQUAL Exp { [($1, $3, $2)] }
    | Dec SEMICOLON Dec { $1 @ $3 }
;

TyDecs : Type ID EQUAL LPAR Types RPAR TyDecs { (#1 $2, $5, #2 $2) :: $7 }
       | { [] }
;
